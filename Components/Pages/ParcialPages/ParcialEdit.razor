@page "/Aporte/Edit/{AporteId:int}"
@inject AportesService AportesService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer 

<h3>Editar Aporte</h3>

<EditForm Model="Aporte" OnValidSubmit="GuardarAporte">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="persona" class="form-label">Persona</label>
        <InputText id="persona" class="form-control" @bind-Value="Aporte.Persona" />
        <ValidationMessage For="@(() => Aporte.Persona)" />
    </div>

    <div class="mb-3">
        <label for="observacion" class="form-label">Observación</label>
        <InputText id="observacion" class="form-control" @bind-Value="Aporte.Observacion" />
        <ValidationMessage For="@(() => Aporte.Observacion)" />
    </div>

    <div class="mb-3">
        <label for="monto" class="form-label">Monto</label>
        <InputNumber id="monto" class="form-control" @bind-Value="Aporte.Monto" />
        <ValidationMessage For="@(() => Aporte.Monto)" />
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
</EditForm>

@code {
    [Parameter] 
    public int AporteId { get; set; }
    private ParcialModelo? Aporte = new();

    protected override async Task OnInitializedAsync()
    {
        Aporte = await AportesService.Buscar(AporteId);
    }

    private async Task GuardarAporte()
    {
        if (Aporte.Persona != null && Aporte.Observacion != null && Aporte.Monto > 0)
        {
            // Llamar al servicio para guardar el nuevo aporte
            var resultado = await AportesService.Guardar(Aporte);

            if (resultado)
            {
                // Redirigir a la página principal después de guardar
                NavigationManager.NavigateTo("/Aporte/Index");
            }
            else
            {
                // Si la operación falla, puedes mostrar un mensaje o manejar el error aquí
                // Ejemplo: Mostrar un error en la UI
            }
        }
    }
}
